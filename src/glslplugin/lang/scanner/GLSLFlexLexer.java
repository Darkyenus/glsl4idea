/* The following code was generated by JFlex 1.4.3 on 07/05/15 09:18 */

/*
 *     Copyright 2010 Jean-Paul Balabanian and Yngve Devik Hammersland
 *
 *     This file is part of glsl4idea.
 *
 *     Glsl4idea is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as
 *     published by the Free Software Foundation, either version 3 of
 *     the License, or (at your option) any later version.
 *
 *     Glsl4idea is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with glsl4idea.  If not, see <http://www.gnu.org/licenses/>.
 */
package glslplugin.lang.scanner;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static glslplugin.lang.elements.GLSLTokenTypes.*;
import java.util.List;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 07/05/15 09:18 from the specification file
 * <tt>/home/abigail/glsl4idea/src/glslplugin/lang/scanner/GLSL.flex</tt>
 */
class GLSLFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PREPROCESSOR = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\6\1\0\1\7\1\5\22\0\1\7\1\102\1\57"+
    "\1\60\1\0\1\73\1\76\1\0\1\67\1\70\1\23\1\72\1\106"+
    "\1\21\1\17\1\22\1\11\1\61\1\51\1\54\1\37\3\2\2\1"+
    "\1\104\1\105\1\74\1\71\1\75\1\103\1\0\1\3\1\3\1\45"+
    "\1\52\1\20\1\16\5\4\1\15\6\4\1\46\1\4\1\10\2\4"+
    "\1\12\2\4\1\65\1\56\1\66\1\77\1\4\1\0\1\30\1\34"+
    "\1\36\1\27\1\35\1\14\1\55\1\47\1\26\1\4\1\62\1\13"+
    "\1\40\1\33\1\25\1\43\1\4\1\44\1\42\1\31\1\32\1\24"+
    "\1\50\1\41\1\53\1\4\1\63\1\100\1\64\1\101\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\2\2\3\1\5"+
    "\1\6\1\7\1\10\21\3\1\1\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\2\36\1\4\7\3\2\1\1\37\1\0"+
    "\1\40\1\0\3\40\2\2\5\3\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\4\3\1\47\1\3\1\50\1\3"+
    "\1\51\34\3\2\4\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\2\3\1\71\7\3\1\0\1\72\1\73"+
    "\1\74\1\40\4\3\1\75\1\3\1\0\4\3\1\76"+
    "\3\3\1\77\41\3\1\100\1\101\14\3\1\102\2\3"+
    "\1\103\1\44\1\3\1\104\1\3\1\105\1\106\1\107"+
    "\10\3\1\110\1\3\1\111\3\3\1\112\2\3\1\113"+
    "\4\3\1\114\1\115\1\116\15\3\1\117\5\3\1\120"+
    "\1\121\5\3\1\122\2\3\1\123\1\124\1\125\1\3"+
    "\1\126\1\127\1\130\1\131\2\3\1\132\1\133\1\134"+
    "\1\3\1\135\1\136\1\137\2\3\1\140\1\141\1\142"+
    "\1\3\1\143\1\3\1\144\13\3\1\145\5\3\1\146"+
    "\1\3\1\147\2\3\1\150\1\151\1\3\1\152\1\3"+
    "\1\153\3\3\1\154\7\3\1\155\3\3\1\156\1\157"+
    "\1\160\1\161\1\162\1\163\1\164\1\165\1\166\1\167"+
    "\1\170\1\3\1\171\1\172\2\3\1\173\3\3\1\174"+
    "\1\175\1\3\1\176\1\3\1\177\1\3\1\200\1\201"+
    "\1\202\1\203\1\204\1\205\1\206\1\207\1\210\1\211"+
    "\1\3\1\212\7\3\1\213\3\3\1\214\1\215\1\3"+
    "\1\216\3\3\1\217\1\220\1\221\6\3\1\222\1\223"+
    "\2\3\1\224\1\225\2\3\1\226\1\227\1\230\1\3"+
    "\1\231\1\232\1\233\4\3\1\234\1\3\1\235\5\3"+
    "\1\236\4\3\1\237\1\240";

  private static int [] zzUnpackAction() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\216"+
    "\0\216\0\216\0\216\0\216\0\216\0\216\0\u0899\0\u08e0"+
    "\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\216\0\u0ad1"+
    "\0\216\0\216\0\216\0\216\0\u0b18\0\216\0\u0b5f\0\u0ba6"+
    "\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde"+
    "\0\216\0\u0e25\0\216\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88"+
    "\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\216\0\216"+
    "\0\u1179\0\u11c0\0\216\0\216\0\u1207\0\u124e\0\u1295\0\u12dc"+
    "\0\u011c\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd"+
    "\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705"+
    "\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d"+
    "\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75"+
    "\0\u1bbc\0\u1c03\0\216\0\216\0\216\0\216\0\216\0\216"+
    "\0\u1c4a\0\216\0\u1c91\0\216\0\216\0\216\0\216\0\216"+
    "\0\216\0\216\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b"+
    "\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u0d97\0\216\0\216\0\216"+
    "\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u011c\0\u2101\0\u2148"+
    "\0\u218f\0\u21d6\0\u221d\0\u2264\0\u011c\0\u22ab\0\u22f2\0\u2339"+
    "\0\u011c\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a"+
    "\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762"+
    "\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a"+
    "\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2"+
    "\0\u2c19\0\u2c60\0\216\0\216\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c"+
    "\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4"+
    "\0\u011c\0\u2ffb\0\u3042\0\u011c\0\216\0\u3089\0\u011c\0\u30d0"+
    "\0\u011c\0\u011c\0\u011c\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233"+
    "\0\u327a\0\u32c1\0\u3308\0\u011c\0\u334f\0\u011c\0\u3396\0\u33dd"+
    "\0\u3424\0\u011c\0\u346b\0\u34b2\0\u011c\0\u34f9\0\u3540\0\u3587"+
    "\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf"+
    "\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7"+
    "\0\u3a3e\0\u011c\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u011c"+
    "\0\u011c\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04\0\u011c\0\u3d4b"+
    "\0\u3d92\0\u011c\0\u011c\0\u011c\0\u3dd9\0\u011c\0\u011c\0\u011c"+
    "\0\u011c\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83\0\u011c"+
    "\0\u011c\0\u011c\0\u3fca\0\u4011\0\u011c\0\u011c\0\u011c\0\u4058"+
    "\0\u011c\0\u409f\0\u011c\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202"+
    "\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac\0\u011c\0\u43f3"+
    "\0\u443a\0\u4481\0\u44c8\0\u450f\0\u011c\0\u4556\0\u011c\0\u459d"+
    "\0\u45e4\0\u011c\0\u011c\0\u462b\0\u011c\0\u4672\0\u011c\0\u46b9"+
    "\0\u4700\0\u4747\0\u011c\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa"+
    "\0\u48f1\0\u4938\0\u011c\0\u497f\0\u49c6\0\u4a0d\0\u011c\0\u011c"+
    "\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u4a54"+
    "\0\u011c\0\u4a9b\0\u011c\0\u011c\0\u4ae2\0\u4b29\0\u011c\0\u4b70"+
    "\0\u4bb7\0\u4bfe\0\u011c\0\u4c45\0\u4c8c\0\u011c\0\u4cd3\0\u011c"+
    "\0\u4d1a\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c\0\u011c"+
    "\0\u011c\0\u011c\0\u011c\0\u4d61\0\u011c\0\u4da8\0\u4def\0\u4e36"+
    "\0\u4e7d\0\u4ec4\0\u4f0b\0\u4f52\0\u011c\0\u4f99\0\u4fe0\0\u5027"+
    "\0\u011c\0\u011c\0\u506e\0\u011c\0\u50b5\0\u50fc\0\u5143\0\u011c"+
    "\0\u011c\0\u011c\0\u518a\0\u51d1\0\u5218\0\u525f\0\u52a6\0\u52ed"+
    "\0\u011c\0\u011c\0\u5334\0\u537b\0\u011c\0\u011c\0\u53c2\0\u5409"+
    "\0\u5450\0\u011c\0\u5497\0\u54de\0\u011c\0\u011c\0\u011c\0\u5525"+
    "\0\u556c\0\u55b3\0\u55fa\0\u011c\0\u5641\0\u011c\0\u5688\0\u56cf"+
    "\0\u5716\0\u575d\0\u57a4\0\u011c\0\u57eb\0\u5832\0\u5879\0\u58c0"+
    "\0\u011c\0\u011c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\2\5\3\6\1\5\1\7\1\5\1\10"+
    "\1\11\2\5\1\12\1\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\4\1\31\1\5\1\32\1\33\1\34"+
    "\2\5\1\35\1\36\1\4\2\5\1\4\1\5\1\37"+
    "\1\3\1\40\1\4\1\5\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\3\2\4\2\5\1\65\1\66\1\67\1\5\1\7"+
    "\1\5\1\70\1\11\2\5\1\12\1\5\1\13\1\14"+
    "\1\15\1\71\1\17\1\72\1\73\1\22\1\23\1\74"+
    "\1\25\1\26\1\75\1\30\1\4\1\31\1\5\1\32"+
    "\1\76\1\34\2\5\1\35\1\36\1\4\2\5\1\4"+
    "\1\5\1\37\1\77\1\100\1\4\1\5\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\110\0\2\4\5\0\1\101\1\4\1\0"+
    "\1\102\1\103\1\104\1\103\1\105\1\106\11\0\1\101"+
    "\2\0\1\106\1\0\1\4\11\0\1\4\2\0\1\4"+
    "\4\0\1\4\26\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\32\5\3\0\2\5\31\0\3\6\100\0\1\107"+
    "\1\110\5\0\1\101\1\110\1\111\1\102\1\103\1\104"+
    "\1\103\1\105\1\106\11\0\1\101\2\0\1\106\1\0"+
    "\1\110\1\0\1\111\7\0\1\110\2\0\1\110\4\0"+
    "\1\110\26\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\5\1\112\2\5\1\113\25\5\3\0\2\5\25\0"+
    "\4\5\3\0\3\5\1\114\3\5\1\0\1\5\3\0"+
    "\1\5\1\115\2\5\1\116\25\5\3\0\2\5\25\0"+
    "\2\105\6\0\1\105\25\0\1\105\11\0\1\105\2\0"+
    "\1\105\4\0\1\105\46\0\1\117\47\0\1\120\37\0"+
    "\1\121\1\122\45\0\1\123\106\0\1\124\16\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\125\2\5"+
    "\1\126\4\5\1\127\20\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\6\5\1\130\23\5"+
    "\3\0\2\5\25\0\4\5\3\0\4\5\1\131\2\5"+
    "\1\0\1\5\3\0\1\132\6\5\1\133\22\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\134\1\135\1\136\11\5\1\137\15\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\140\24\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\20\5\1\141\11\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\142"+
    "\1\5\1\143\4\5\1\144\22\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\145"+
    "\30\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\146\1\147\4\5\1\150\11\5\1\151"+
    "\11\5\3\0\2\5\25\0\4\5\3\0\3\5\1\152"+
    "\3\5\1\0\1\5\3\0\32\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\153"+
    "\7\5\1\154\20\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\155\4\5\1\156"+
    "\20\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\157\1\160\1\161\5\5\1\162"+
    "\6\5\1\163\6\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\164\13\5\1\165"+
    "\11\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\166\20\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\167"+
    "\27\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\20\5\1\170\2\5\1\171\6\5\3\0"+
    "\2\5\31\0\1\172\1\173\171\0\1\174\106\0\1\175"+
    "\1\176\105\0\1\177\106\0\1\200\2\0\1\201\103\0"+
    "\1\202\3\0\1\203\102\0\1\204\4\0\1\205\101\0"+
    "\1\206\5\0\1\207\100\0\1\210\6\0\1\211\77\0"+
    "\1\212\23\0\1\66\107\0\1\67\100\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\112\1\213\1\5"+
    "\1\113\25\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\1\5\1\125\2\5\1\126\4\5"+
    "\1\214\20\5\3\0\2\5\25\0\4\5\3\0\4\5"+
    "\1\215\2\5\1\0\1\5\3\0\1\132\6\5\1\133"+
    "\22\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\134\1\135\1\136\6\5\1\216\2\5"+
    "\1\137\15\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\1\142\1\5\1\143\4\5\1\217"+
    "\22\5\3\0\2\5\25\0\4\5\3\0\3\5\1\220"+
    "\3\5\1\0\1\5\3\0\7\5\1\221\5\5\1\222"+
    "\2\5\1\223\11\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\164\13\5\1\224"+
    "\11\5\3\0\2\5\24\0\5\225\2\0\50\225\1\226"+
    "\27\225\60\0\1\227\42\0\1\230\110\0\1\230\71\0"+
    "\2\105\6\0\1\105\1\0\1\102\1\103\1\104\1\103"+
    "\1\0\1\106\14\0\1\106\1\0\1\105\11\0\1\105"+
    "\2\0\1\105\4\0\1\105\26\0\2\231\6\0\1\231"+
    "\1\0\1\102\1\103\1\104\1\103\2\0\1\231\15\0"+
    "\1\231\11\0\1\231\2\0\1\231\4\0\1\231\10\0"+
    "\1\231\15\0\2\107\6\0\1\107\1\0\1\102\1\103"+
    "\1\104\1\103\1\105\1\106\14\0\1\106\1\0\1\107"+
    "\11\0\1\107\2\0\1\107\4\0\1\107\26\0\1\107"+
    "\1\110\5\0\1\101\1\110\1\0\1\102\1\103\1\104"+
    "\1\103\1\105\1\106\11\0\1\101\2\0\1\106\1\0"+
    "\1\110\11\0\1\110\2\0\1\110\4\0\1\110\26\0"+
    "\3\111\4\0\1\101\1\111\2\0\1\111\1\0\1\111"+
    "\1\0\1\111\6\0\2\111\1\0\1\101\1\0\4\111"+
    "\5\0\1\111\3\0\2\111\1\0\1\111\4\0\1\111"+
    "\26\0\4\5\3\0\7\5\1\0\1\5\3\0\24\5"+
    "\1\232\5\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\27\5\1\233\2\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\234\2\5\1\235\25\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\236\11\5"+
    "\3\0\2\5\25\0\4\5\3\0\3\5\1\237\3\5"+
    "\1\0\1\5\3\0\32\5\3\0\2\5\24\0\5\121"+
    "\2\0\100\121\23\122\1\240\63\122\1\0\4\5\3\0"+
    "\3\5\1\241\3\5\1\0\1\5\3\0\2\5\1\242"+
    "\27\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\20\5\1\243\11\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\1\244"+
    "\17\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\245\24\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\246"+
    "\20\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\247\1\250\3\5\1\251\24\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\252\20\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\253\23\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\16\5\1\254\13\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\255\25\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\256\24\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\257\23\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\260\20\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\261\22\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\2\5\1\262\27\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\17\5\1\263\12\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\11\5\1\264\20\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\1\5\1\265\30\5\3\0"+
    "\2\5\25\0\4\5\3\0\4\5\1\266\2\5\1\0"+
    "\1\5\3\0\32\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\11\5\1\267\20\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\16\5\1\270\13\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\271\13\5\1\272"+
    "\6\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\273\22\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\274"+
    "\24\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\275\26\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\14\5\1\276"+
    "\15\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\20\5\1\277\11\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\10\5\1\300"+
    "\21\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\301\30\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\302"+
    "\25\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\303\24\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\304"+
    "\20\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\305\1\306\10\5\1\307\13\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\31\5\1\310\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\2\5\1\311\27\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\2\5\1\312\27\5\3\0\2\5\32\0\1\173\171\0"+
    "\1\313\106\0\1\314\16\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\315\22\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\1\244"+
    "\5\5\1\316\11\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\3\5\1\317\3\5\1\320"+
    "\22\5\3\0\2\5\25\0\4\5\3\0\4\5\1\321"+
    "\2\5\1\0\1\5\3\0\32\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\262"+
    "\1\322\26\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\2\5\1\323\13\5\1\324\13\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\325\26\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\326\24\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\327\11\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\330\4\5"+
    "\1\304\20\5\3\0\2\5\25\0\2\231\6\0\1\231"+
    "\1\0\1\102\1\103\1\104\1\103\20\0\1\231\11\0"+
    "\1\231\2\0\1\231\4\0\1\231\26\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\17\5\1\331\12\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\1\5\1\332\30\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\333\25\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\334\24\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\16\5\1\257\13\5\3\0"+
    "\2\5\24\0\22\122\1\335\1\240\63\122\1\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\336\25\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\337\26\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\27\5\1\340\2\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\13\5\1\341\11\5\1\342\2\5\1\343\1\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\12\5\1\344\17\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\4\5\1\345\25\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\6\5\1\346\23\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\347\17\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\10\5\1\350\21\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\351\17\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\352\24\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\353\11\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\354\20\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\355\17\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\356\24\5\3\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\357\2\5\1\0\1\5\3\0\32\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\360\20\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\361\17\5"+
    "\3\0\2\5\25\0\4\5\3\0\3\5\1\362\3\5"+
    "\1\0\1\5\3\0\32\5\3\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\363\2\5\1\0\1\5\3\0\32\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\364\25\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\365\20\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\5\5\1\366\10\5\1\367\13\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\11\5"+
    "\1\370\20\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\5\5\1\371\24\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\13\5"+
    "\1\372\11\5\1\373\2\5\1\374\1\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\375\27\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\17\5\1\376\12\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\6\5"+
    "\1\377\23\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\20\5\1\u0100\11\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\u0101\30\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\20\5\1\u0102\11\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\1\u0103\17\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\12\5\1\u0104\17\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\3\5"+
    "\1\u0105\26\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\6\5\1\u0106\23\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\u0107\24\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\23\5\1\232\6\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\u0108\24\5\3\0\2\5\25\0\4\5\3\0\3\5"+
    "\1\u0109\3\5\1\0\1\5\3\0\32\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\11\5"+
    "\1\u010a\20\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\16\5\1\u010b\13\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\11\5"+
    "\1\u010c\20\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\3\5\1\u010d\26\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\u010e\27\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u010f\20\5\3\0\2\5"+
    "\25\0\4\5\3\0\4\5\1\u0110\2\5\1\0\1\5"+
    "\3\0\32\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u0111\20\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\u0112\27\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u0113\20\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\5"+
    "\1\u0114\30\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\31\5\1\u0115\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\6\5\1\u0116"+
    "\23\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u0117\24\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\u0118"+
    "\24\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\2\5\1\u0119\27\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\13\5\1\u011a"+
    "\11\5\1\u011b\2\5\1\u011c\1\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\20\5\1\u011d"+
    "\11\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u011e\24\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\13\5\1\u011f"+
    "\11\5\1\u0120\2\5\1\u0121\1\5\3\0\2\5\25\0"+
    "\4\5\3\0\3\5\1\u0122\3\5\1\0\1\5\3\0"+
    "\32\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\u0123\25\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\13\5\1\u0124"+
    "\11\5\1\u0125\2\5\1\u0126\1\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\u0127"+
    "\27\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\13\5\1\u0128\11\5\1\u0129\2\5\1\u012a"+
    "\1\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\u012b\30\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\20\5\1\u012c"+
    "\11\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\13\5\1\u012d\11\5\1\u012e\2\5\1\u012f"+
    "\1\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u0130\20\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\32\5\3\0"+
    "\1\5\1\u0131\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u0132\27\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u0133\24\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\u0134\11\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0135\11\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\15\5\1\u0136\14\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\15\5\1\u0137\14\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\15\5\1\u0138\14\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\6\5\1\u0139\23\5"+
    "\3\0\2\5\25\0\4\5\3\0\3\5\1\u013a\3\5"+
    "\1\0\1\5\3\0\32\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\12\5\1\u013b\17\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u013c\30\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u013d\24\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u013e\20\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\23\5\1\u013f\6\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u0140\27\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\u0141\30\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\u0142\11\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0143\11\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0144\20\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u0145\20\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u0146\27\5\3\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\u0147\2\5\1\0\1\5\3\0\32\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0148\20\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u0149\22\5"+
    "\3\0\2\5\25\0\4\5\3\0\4\5\1\u014a\2\5"+
    "\1\0\1\5\3\0\32\5\3\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\u014b\2\5\1\0\1\5\3\0\32\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u014c\22\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u014d\11\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\14\5\1\u014e\15\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u014f\24\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u0150\27\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u0151\22\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u0152\27\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u0153\20\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\20\5\1\u0154\11\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\15\5\1\u0155\14\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\15\5\1\u0156\14\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\15\5\1\u0157\14\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\10\5\1\u0158\21\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u0159\11\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\16\5\1\u015a\13\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\20\5\1\u015b\11\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u015c\22\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\11\5\1\u015d\20\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u015e\30\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\13\5\1\u015f\11\5"+
    "\1\u0160\2\5\1\u0161\1\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\13\5\1\u0162\11\5"+
    "\1\u0163\2\5\1\u0164\1\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\13\5\1\u0165\11\5"+
    "\1\u0166\2\5\1\u0167\1\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\14\5\1\232\15\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0168\20\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\5\5\1\u0169\24\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\6\5\1\u016a\23\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\23\5\1\u016b\6\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\u016c\26\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\16\5\1\u016d\13\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\7\5\1\u016e\22\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\7\5\1\u016f\22\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\2\5\1\u0170\27\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\1\5\1\u0171\30\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\1\5\1\u0172\30\5\3\0\2\5\25\0\4\5"+
    "\3\0\4\5\1\u0173\2\5\1\0\1\5\3\0\32\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\11\5\1\u0174\20\5\3\0\2\5\25\0\4\5"+
    "\3\0\7\5\1\0\1\5\3\0\16\5\1\u0175\13\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\4\5\1\u0176\25\5\3\0\2\5\25\0\4\5"+
    "\3\0\3\5\1\u0177\3\5\1\0\1\5\3\0\32\5"+
    "\3\0\2\5\25\0\4\5\3\0\7\5\1\0\1\5"+
    "\3\0\31\5\1\u0178\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\4\5\1\u0179\25\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\u017a\26\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\13\5\1\u017b\11\5\1\u017c"+
    "\2\5\1\u017d\1\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\13\5\1\u017e\11\5\1\u017f"+
    "\2\5\1\u0180\1\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\13\5\1\u0181\11\5\1\u0182"+
    "\2\5\1\u0183\1\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\6\5\1\u0184\23\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\14\5\1\u0185\15\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\17\5\1\u0186\12\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\6\5\1\u0187\23\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\7\5\1\u0188\22\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\2\5\1\u0189\27\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\20\5\1\u018a\11\5\3\0"+
    "\2\5\25\0\4\5\3\0\7\5\1\0\1\5\3\0"+
    "\5\5\1\u018b\24\5\3\0\2\5\25\0\4\5\3\0"+
    "\7\5\1\0\1\5\3\0\2\5\1\u018c\6\5\1\u018d"+
    "\20\5\3\0\2\5\25\0\4\5\3\0\3\5\1\u018e"+
    "\3\5\1\0\1\5\3\0\32\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\12\5\1\u018f"+
    "\17\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\7\5\1\u0190\22\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\7\5\1\u0191"+
    "\22\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\u0192\26\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\2\5\1\u0193"+
    "\27\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u0194\20\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\7\5\1\u0195"+
    "\22\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\5\5\1\u0196\24\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\11\5\1\u0197"+
    "\20\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u0198\20\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\5\5\1\u0199"+
    "\24\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\u019a\26\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\21\5\1\u019b"+
    "\3\5\1\u019c\2\5\1\u019d\1\5\3\0\1\u019e\1\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\u019f\27\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\1\5\1\u01a0\30\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\27\5"+
    "\1\u01a1\2\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\5\5\1\u01a2\24\5\3\0\2\5"+
    "\25\0\4\5\3\0\3\5\1\u01a3\3\5\1\0\1\5"+
    "\3\0\32\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\1\5\1\u01a4\30\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\5\5"+
    "\1\u01a5\24\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u01a6\20\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\12\5"+
    "\1\u01a7\17\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\6\5\1\u01a8\23\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\26\5"+
    "\1\u01a9\3\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\26\5\1\u01aa\3\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\26\5"+
    "\1\u01ab\3\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\7\5\1\u01ac\22\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\7\5"+
    "\1\u01ad\22\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\27\5\1\u01ae\2\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\7\5"+
    "\1\u01af\22\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\5\5\1\u01b0\24\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\10\5"+
    "\1\u01b1\21\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\22\5\1\u01b2\7\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\22\5"+
    "\1\u01b3\7\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u01b4\20\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\2\5"+
    "\1\u01b5\27\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\11\5\1\u01b6\20\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\23\5"+
    "\1\u01b7\6\5\3\0\2\5\25\0\4\5\3\0\7\5"+
    "\1\0\1\5\3\0\23\5\1\u01b8\6\5\3\0\2\5"+
    "\25\0\4\5\3\0\7\5\1\0\1\5\3\0\1\u01b9"+
    "\31\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\4\5\1\u01ba\25\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\4\5\1\u01bb"+
    "\25\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\11\5\1\u01bc\20\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\3\5\1\u01bd"+
    "\26\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\u01be\26\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\1\5\1\u01bf"+
    "\30\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\1\5\1\u01c0\30\5\3\0\2\5\25\0"+
    "\4\5\3\0\7\5\1\0\1\5\3\0\24\5\1\u01c1"+
    "\5\5\3\0\2\5\25\0\4\5\3\0\7\5\1\0"+
    "\1\5\3\0\24\5\1\u01c2\5\5\3\0\2\5\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22791];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\34\1\7\11\10\1\1\11\1\1\4\11"+
    "\1\1\1\11\12\1\1\11\1\0\1\11\1\0\12\1"+
    "\2\11\2\1\2\11\46\1\6\11\1\1\1\11\1\1"+
    "\7\11\12\1\1\0\3\11\7\1\1\0\52\1\2\11"+
    "\20\1\1\11\345\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GLSLFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 124: 
          { return PREPROCESSOR_IFNDEF;
          }
        case 161: break;
        case 90: 
          { return DMAT4_TYPE;
          }
        case 162: break;
        case 20: 
          { return RIGHT_ANGLE;
          }
        case 163: break;
        case 13: 
          { return RIGHT_BRACKET;
          }
        case 164: break;
        case 24: 
          { return TILDE;
          }
        case 165: break;
        case 10: 
          { return LEFT_BRACE;
          }
        case 166: break;
        case 31: 
          { return UINT_CONSTANT;
          }
        case 167: break;
        case 144: 
          { return COHERENT_KEYWORD;
          }
        case 168: break;
        case 37: 
          { return DIV_ASSIGN;
          }
        case 169: break;
        case 12: 
          { return LEFT_BRACKET;
          }
        case 170: break;
        case 47: 
          { return LEFT_OP;
          }
        case 171: break;
        case 121: 
          { return SMOOTH_KEYWORD;
          }
        case 172: break;
        case 91: 
          { return DMAT2_TYPE;
          }
        case 173: break;
        case 2: 
          { return INTEGER_CONSTANT;
          }
        case 174: break;
        case 89: 
          { return DVEC3_TYPE;
          }
        case 175: break;
        case 127: 
          { return VARYING_KEYWORD;
          }
        case 176: break;
        case 139: 
          { return PRECISE_KEYWORD;
          }
        case 177: break;
        case 141: 
          { return PREPROCESSOR_DEFINED;
          }
        case 178: break;
        case 87: 
          { return DVEC4_TYPE;
          }
        case 179: break;
        case 54: 
          { return OR_ASSIGN;
          }
        case 180: break;
        case 60: 
          { return DOUBLE_CONSTANT;
          }
        case 181: break;
        case 59: 
          { return PREPROCESSOR_CONCAT;
          }
        case 182: break;
        case 128: 
          { return DISCARD_JUMP_STATEMENT;
          }
        case 183: break;
        case 63: 
          { return INT_TYPE;
          }
        case 184: break;
        case 5: 
          { return DOT;
          }
        case 185: break;
        case 100: 
          { return CONST_KEYWORD;
          }
        case 186: break;
        case 74: 
          { return BOOL_TYPE;
          }
        case 187: break;
        case 9: 
          { yybegin(PREPROCESSOR); return PREPROCESSOR_BEGIN;
          }
        case 188: break;
        case 82: 
          { return FLOAT_TYPE;
          }
        case 189: break;
        case 88: 
          { return DVEC2_TYPE;
          }
        case 190: break;
        case 142: 
          { return VOLATILE_KEYWORD;
          }
        case 191: break;
        case 145: 
          { return CENTROID_KEYWORD;
          }
        case 192: break;
        case 1: 
          { return UNKNOWN;
          }
        case 193: break;
        case 75: 
          { return ELSE_KEYWORD;
          }
        case 194: break;
        case 79: 
          { return PREPROCESSOR_LINE;
          }
        case 195: break;
        case 131: 
          { return DMAT4X3_TYPE;
          }
        case 196: break;
        case 56: 
          { return NE_OP;
          }
        case 197: break;
        case 110: 
          { return MAT4X4_TYPE;
          }
        case 198: break;
        case 129: 
          { return DMAT4X4_TYPE;
          }
        case 199: break;
        case 28: 
          { return SEMICOLON;
          }
        case 200: break;
        case 152: 
          { return SAMPLER1D_TYPE;
          }
        case 201: break;
        case 14: 
          { return LEFT_PAREN;
          }
        case 202: break;
        case 111: 
          { return MAT4X2_TYPE;
          }
        case 203: break;
        case 81: 
          { return PREPROCESSOR_ELSE;
          }
        case 204: break;
        case 130: 
          { return DMAT4X2_TYPE;
          }
        case 205: break;
        case 122: 
          { return SHARED_KEYWORD;
          }
        case 206: break;
        case 80: 
          { return PREPROCESSOR_ELIF;
          }
        case 207: break;
        case 112: 
          { return MAT4X3_TYPE;
          }
        case 208: break;
        case 109: 
          { return BUFFER_KEYWORD;
          }
        case 209: break;
        case 95: 
          { return UVEC3_TYPE;
          }
        case 210: break;
        case 106: 
          { return PREPROCESSOR_ERROR;
          }
        case 211: break;
        case 101: 
          { return PATCH_KEYWORD;
          }
        case 212: break;
        case 93: 
          { return UVEC4_TYPE;
          }
        case 213: break;
        case 159: 
          { return SAMPLER2DSHADOW_TYPE;
          }
        case 214: break;
        case 41: 
          { return DO_KEYWORD;
          }
        case 215: break;
        case 48: 
          { return GE_OP;
          }
        case 216: break;
        case 11: 
          { return RIGHT_BRACE;
          }
        case 217: break;
        case 108: 
          { return DOUBLE_TYPE;
          }
        case 218: break;
        case 26: 
          { return QUESTION;
          }
        case 219: break;
        case 158: 
          { return NOPERSPECTIVE_KEYWORD;
          }
        case 220: break;
        case 94: 
          { return UVEC2_TYPE;
          }
        case 221: break;
        case 85: 
          { return IVEC3_TYPE;
          }
        case 222: break;
        case 50: 
          { return AND_ASSIGN;
          }
        case 223: break;
        case 43: 
          { return ADD_ASSIGN;
          }
        case 224: break;
        case 148: 
          { return INVARIANT_KEYWORD;
          }
        case 225: break;
        case 6: 
          { return DASH;
          }
        case 226: break;
        case 83: 
          { return IVEC4_TYPE;
          }
        case 227: break;
        case 45: 
          { return MOD_ASSIGN;
          }
        case 228: break;
        case 22: 
          { return CARET;
          }
        case 229: break;
        case 57: 
          { return PREPROCESSOR_IF;
          }
        case 230: break;
        case 68: 
          { return VOID_TYPE;
          }
        case 231: break;
        case 72: 
          { return BOOL_CONSTANT;
          }
        case 232: break;
        case 105: 
          { return PREPROCESSOR_ENDIF;
          }
        case 233: break;
        case 102: 
          { return WHILE_KEYWORD;
          }
        case 234: break;
        case 147: 
          { return RESTRICT_KEYWORD;
          }
        case 235: break;
        case 84: 
          { return IVEC2_TYPE;
          }
        case 236: break;
        case 143: 
          { return CONTINUE_JUMP_STATEMENT;
          }
        case 237: break;
        case 42: 
          { return EQ_OP;
          }
        case 238: break;
        case 35: 
          { return COMMENT_LINE;
          }
        case 239: break;
        case 17: 
          { return PLUS;
          }
        case 240: break;
        case 134: 
          { return DMAT2X3_TYPE;
          }
        case 241: break;
        case 36: 
          { return COMMENT_BLOCK;
          }
        case 242: break;
        case 153: 
          { return PRECISION_KEYWORD;
          }
        case 243: break;
        case 113: 
          { return MAT2X4_TYPE;
          }
        case 244: break;
        case 132: 
          { return DMAT2X4_TYPE;
          }
        case 245: break;
        case 64: 
          { return LEFT_ASSIGN;
          }
        case 246: break;
        case 73: 
          { return UINT_TYPE;
          }
        case 247: break;
        case 150: 
          { return SAMPLER2D_TYPE;
          }
        case 248: break;
        case 126: 
          { return PREPROCESSOR_PRAGMA;
          }
        case 249: break;
        case 61: 
          { return FOR_KEYWORD;
          }
        case 250: break;
        case 104: 
          { return PREPROCESSOR_UNDEF;
          }
        case 251: break;
        case 27: 
          { return COLON;
          }
        case 252: break;
        case 19: 
          { return LEFT_ANGLE;
          }
        case 253: break;
        case 138: 
          { return UNIFORM_KEYWORD;
          }
        case 254: break;
        case 114: 
          { return MAT2X2_TYPE;
          }
        case 255: break;
        case 133: 
          { return DMAT2X2_TYPE;
          }
        case 256: break;
        case 115: 
          { return MAT2X3_TYPE;
          }
        case 257: break;
        case 38: 
          { return MUL_ASSIGN;
          }
        case 258: break;
        case 25: 
          { return BANG;
          }
        case 259: break;
        case 53: 
          { return XOR_OP;
          }
        case 260: break;
        case 7: 
          { return SLASH;
          }
        case 261: break;
        case 67: 
          { return FLAT_KEYWORD;
          }
        case 262: break;
        case 154: 
          { return WRITEONLY_KEYWORD;
          }
        case 263: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 264: break;
        case 120: 
          { return STRUCT;
          }
        case 265: break;
        case 125: 
          { return PREPROCESSOR_DEFINE;
          }
        case 266: break;
        case 40: 
          { return IN_KEYWORD;
          }
        case 267: break;
        case 58: 
          { return PREPROCESSOR_STRING;
          }
        case 268: break;
        case 8: 
          { return STAR;
          }
        case 269: break;
        case 76: 
          { return MAT4_TYPE;
          }
        case 270: break;
        case 155: 
          { return PREPROCESSOR_EXTENSION;
          }
        case 271: break;
        case 46: 
          { return LE_OP;
          }
        case 272: break;
        case 23: 
          { return VERTICAL_BAR;
          }
        case 273: break;
        case 21: 
          { return AMPERSAND;
          }
        case 274: break;
        case 33: 
          { return DEC_OP;
          }
        case 275: break;
        case 123: 
          { return RETURN_JUMP_STATEMENT;
          }
        case 276: break;
        case 18: 
          { return PERCENT;
          }
        case 277: break;
        case 77: 
          { return MAT2_TYPE;
          }
        case 278: break;
        case 140: 
          { return PREPROCESSOR_VERSION;
          }
        case 279: break;
        case 15: 
          { return RIGHT_PAREN;
          }
        case 280: break;
        case 78: 
          { return MAT3_TYPE;
          }
        case 281: break;
        case 119: 
          { return SAMPLE_KEYWORD;
          }
        case 282: break;
        case 69: 
          { return VEC4_TYPE;
          }
        case 283: break;
        case 16: 
          { return EQUAL;
          }
        case 284: break;
        case 51: 
          { return AND_OP;
          }
        case 285: break;
        case 55: 
          { return OR_OP;
          }
        case 286: break;
        case 103: 
          { return PREPROCESSOR_IFDEF;
          }
        case 287: break;
        case 146: 
          { return READONLY_KEYWORD;
          }
        case 288: break;
        case 70: 
          { return VEC2_TYPE;
          }
        case 289: break;
        case 30: 
          { yybegin(YYINITIAL); return PREPROCESSOR_END;
          }
        case 290: break;
        case 62: 
          { return OUT_KEYWORD;
          }
        case 291: break;
        case 4: 
          { return WHITE_SPACE;
          }
        case 292: break;
        case 151: 
          { return SAMPLER3D_TYPE;
          }
        case 293: break;
        case 71: 
          { return VEC3_TYPE;
          }
        case 294: break;
        case 39: 
          { return IF_KEYWORD;
          }
        case 295: break;
        case 66: 
          { return PRECISION_QUALIFIER;
          }
        case 296: break;
        case 52: 
          { return XOR_ASSIGN;
          }
        case 297: break;
        case 34: 
          { return SUB_ASSIGN;
          }
        case 298: break;
        case 137: 
          { return DMAT3X3_TYPE;
          }
        case 299: break;
        case 49: 
          { return RIGHT_OP;
          }
        case 300: break;
        case 116: 
          { return MAT3X4_TYPE;
          }
        case 301: break;
        case 29: 
          { return COMMA;
          }
        case 302: break;
        case 99: 
          { return BREAK_JUMP_STATEMENT;
          }
        case 303: break;
        case 135: 
          { return DMAT3X4_TYPE;
          }
        case 304: break;
        case 96: 
          { return BVEC4_TYPE;
          }
        case 305: break;
        case 107: 
          { return LAYOUT_KEYWORD;
          }
        case 306: break;
        case 157: 
          { return SAMPLERCUBE_TYPE;
          }
        case 307: break;
        case 32: 
          { return FLOAT_CONSTANT;
          }
        case 308: break;
        case 156: 
          { return SUBROUTINE_KEYWORD;
          }
        case 309: break;
        case 44: 
          { return INC_OP;
          }
        case 310: break;
        case 149: 
          { return ATTRIBUTE_KEYWORD;
          }
        case 311: break;
        case 86: 
          { return INOUT_KEYWORD;
          }
        case 312: break;
        case 117: 
          { return MAT3X2_TYPE;
          }
        case 313: break;
        case 136: 
          { return DMAT3X2_TYPE;
          }
        case 314: break;
        case 97: 
          { return BVEC2_TYPE;
          }
        case 315: break;
        case 118: 
          { return MAT3X3_TYPE;
          }
        case 316: break;
        case 98: 
          { return BVEC3_TYPE;
          }
        case 317: break;
        case 160: 
          { return SAMPLER1DSHADOW_TYPE;
          }
        case 318: break;
        case 92: 
          { return DMAT3_TYPE;
          }
        case 319: break;
        case 65: 
          { return RIGHT_ASSIGN;
          }
        case 320: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
