/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 *     Copyright 2010 Jean-Paul Balabanian and Yngve Devik Hammersland
 *
 *     This file is part of glsl4idea.
 *
 *     Glsl4idea is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as
 *     published by the Free Software Foundation, either version 3 of
 *     the License, or (at your option) any later version.
 *
 *     Glsl4idea is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with glsl4idea.  If not, see <http://www.gnu.org/licenses/>.
 */
package glslplugin.lang.scanner;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static glslplugin.lang.elements.GLSLTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>GLSL.flex</tt>
 */
class GLSLFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PREPROCESSOR = 2;
  public static final int PREPROCESSOR_RAW_MODE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\7\1\6\1\115\1\7\1\5\22\0\1\7\1\110\1\22\1\47\1\0\1\101\1\104\1\24"+
    "\1\75\1\76\1\31\1\100\1\114\1\21\1\17\1\30\1\11\1\55\1\51\1\52\1\53\3\2\2"+
    "\1\1\112\1\113\1\102\1\77\1\103\1\111\1\0\1\61\1\3\1\57\1\56\1\20\1\16\5\4"+
    "\1\15\1\63\4\4\1\60\1\64\1\4\1\10\2\4\1\12\2\4\1\73\1\23\1\74\1\105\1\54\1"+
    "\0\1\43\1\25\1\50\1\32\1\33\1\14\1\44\1\65\1\34\1\4\1\67\1\13\1\45\1\35\1"+
    "\41\1\42\1\4\1\40\1\37\1\46\1\36\1\26\1\66\1\27\1\62\1\70\1\71\1\106\1\72"+
    "\1\107\6\0\1\115\242\0\2\115\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\3\2\4"+
    "\1\6\1\7\2\2\2\4\1\10\1\11\15\4\1\12"+
    "\3\4\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\2\37\1\5\1\4"+
    "\1\2\6\4\1\2\2\1\1\2\1\1\1\40\1\0"+
    "\1\41\1\0\3\41\2\3\7\4\1\42\1\43\1\0"+
    "\1\44\1\0\2\5\7\4\1\45\1\46\1\47\1\50"+
    "\3\4\1\51\4\4\1\52\2\4\1\53\46\4\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\4\1\0"+
    "\1\73\1\0\6\4\1\74\2\4\1\75\2\0\2\1"+
    "\1\76\1\41\10\4\1\77\1\4\1\0\10\4\1\0"+
    "\14\4\1\100\27\4\1\101\4\4\1\102\24\4\1\103"+
    "\1\104\1\4\1\0\1\73\1\0\13\4\1\1\1\45"+
    "\1\46\1\1\1\105\2\4\1\106\6\4\1\107\1\110"+
    "\1\111\1\112\1\4\1\113\1\4\1\46\5\4\1\114"+
    "\15\4\1\115\27\4\1\116\1\117\1\120\1\4\1\121"+
    "\6\4\1\122\3\4\1\123\2\4\1\124\1\125\10\4"+
    "\1\126\1\4\1\127\1\130\1\131\1\4\1\132\2\4"+
    "\1\133\1\134\1\135\3\4\1\136\1\137\1\140\1\4"+
    "\1\141\1\142\1\143\2\4\1\144\5\4\1\145\1\146"+
    "\1\147\20\4\1\150\11\4\1\151\2\4\1\152\1\4"+
    "\1\153\3\4\1\154\1\155\1\156\1\4\1\157\1\4"+
    "\1\160\1\161\4\4\1\162\3\4\1\102\13\4\1\163"+
    "\1\164\1\165\1\166\1\167\3\4\1\170\5\4\1\171"+
    "\1\172\1\173\1\174\1\175\1\176\1\177\1\200\1\201"+
    "\6\4\1\202\1\4\1\203\1\204\1\4\1\205\1\206"+
    "\1\207\1\210\1\211\1\212\1\213\1\214\1\215\1\216"+
    "\1\217\1\220\4\4\3\221\2\4\1\222\4\4\1\223"+
    "\3\4\1\224\4\4\1\225\1\226\1\4\1\227\14\4"+
    "\1\230\1\231\3\4\1\232\1\233\1\234\2\4\1\235"+
    "\5\4\3\221\1\4\1\236\1\4\1\237\1\240\1\241"+
    "\4\4\1\242\14\4\1\243\4\4\1\244\1\221\3\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u06b4\0\u0702"+
    "\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6\0\u0924\0\352"+
    "\0\u0972\0\u09c0\0\u0a0e\0\352\0\352\0\352\0\352\0\352"+
    "\0\352\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46\0\u0b94\0\u0be2\0\u0c30"+
    "\0\u0c7e\0\352\0\u0ccc\0\352\0\352\0\352\0\352\0\u0d1a"+
    "\0\352\0\u0d68\0\u0db6\0\u0e04\0\u0e52\0\u0ea0\0\u0eee\0\u0f3c"+
    "\0\u0f8a\0\u0fd8\0\u1026\0\u1074\0\u10c2\0\u1110\0\u115e\0\352"+
    "\0\u11ac\0\352\0\u11fa\0\u1248\0\u1296\0\u12e4\0\u1332\0\u1380"+
    "\0\u13ce\0\u141c\0\u146a\0\u14b8\0\u1506\0\u1554\0\u15a2\0\352"+
    "\0\352\0\u03a8\0\352\0\u15f0\0\u163e\0\352\0\u168c\0\u16da"+
    "\0\u1728\0\u1776\0\u17c4\0\u1812\0\u1860\0\u18ae\0\u18fc\0\352"+
    "\0\352\0\u194a\0\u1998\0\u19e6\0\u1a34\0\u1a82\0\u1ad0\0\u1b1e"+
    "\0\u1b6c\0\u0186\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\u1cf2\0\u1d40"+
    "\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0"+
    "\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184\0\u21d2\0\u2220"+
    "\0\u226e\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490"+
    "\0\u24de\0\u252c\0\u257a\0\u25c8\0\u2616\0\u2664\0\u26b2\0\u2700"+
    "\0\u274e\0\u279c\0\u27ea\0\352\0\352\0\352\0\352\0\352"+
    "\0\u2838\0\352\0\u2886\0\352\0\352\0\352\0\352\0\352"+
    "\0\352\0\352\0\u28d4\0\u0e04\0\352\0\u2922\0\u2970\0\u29be"+
    "\0\u2a0c\0\u2a5a\0\u2aa8\0\u2af6\0\u2b44\0\u2b92\0\u2be0\0\352"+
    "\0\u2c2e\0\u2c7c\0\u2cca\0\u2d18\0\352\0\u2d66\0\u2db4\0\u2e02"+
    "\0\u2e50\0\u2e9e\0\u2eec\0\u2f3a\0\u2f88\0\u2fd6\0\u0186\0\u3024"+
    "\0\u3072\0\u30c0\0\u310e\0\u315c\0\u31aa\0\u31f8\0\u3246\0\u3294"+
    "\0\u32e2\0\u3330\0\u337e\0\u33cc\0\u341a\0\u3468\0\u34b6\0\u3504"+
    "\0\u3552\0\u35a0\0\u35ee\0\u363c\0\u368a\0\u36d8\0\u3726\0\u3774"+
    "\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u38fa\0\u3948\0\u3996\0\u39e4"+
    "\0\u3a32\0\u3a80\0\u3ace\0\u3b1c\0\u3b6a\0\u3bb8\0\u3c06\0\u3c54"+
    "\0\u3ca2\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda\0\u3e28\0\u3e76\0\u3ec4"+
    "\0\u3f12\0\u3f60\0\u3fae\0\u0186\0\u3ffc\0\u404a\0\u4098\0\u40e6"+
    "\0\u4134\0\u4182\0\u41d0\0\u421e\0\u426c\0\u42ba\0\u4308\0\u4356"+
    "\0\u43a4\0\u43f2\0\u4440\0\u448e\0\u44dc\0\u452a\0\u4578\0\u45c6"+
    "\0\352\0\352\0\u4614\0\u4662\0\u03a8\0\u46b0\0\u46fe\0\u474c"+
    "\0\u479a\0\u47e8\0\u4836\0\u4884\0\u48d2\0\u4920\0\u496e\0\u49bc"+
    "\0\u4a0a\0\u4a58\0\u4aa6\0\u4af4\0\u4b42\0\u0186\0\u4b90\0\u4bde"+
    "\0\u0186\0\u4c2c\0\u4c7a\0\u4cc8\0\u4d16\0\u4d64\0\u4db2\0\u0186"+
    "\0\u0186\0\u0186\0\u0186\0\u4e00\0\u0186\0\u4e4e\0\352\0\u4e9c"+
    "\0\u4eea\0\u4f38\0\u4f86\0\u4fd4\0\u0186\0\u5022\0\u5070\0\u50be"+
    "\0\u510c\0\u515a\0\u51a8\0\u51f6\0\u5244\0\u5292\0\u52e0\0\u532e"+
    "\0\u537c\0\u53ca\0\u0186\0\u5418\0\u5466\0\u54b4\0\u5502\0\u5550"+
    "\0\u559e\0\u55ec\0\u563a\0\u5688\0\u56d6\0\u5724\0\u5772\0\u57c0"+
    "\0\u580e\0\u585c\0\u58aa\0\u58f8\0\u5946\0\u5994\0\u59e2\0\u5a30"+
    "\0\u5a7e\0\u5acc\0\u5b1a\0\u5b68\0\u5bb6\0\u5c04\0\u0186\0\u5c52"+
    "\0\u5ca0\0\u5cee\0\u5d3c\0\u5d8a\0\u5dd8\0\u0186\0\u5e26\0\u5e74"+
    "\0\u5ec2\0\u0186\0\u5f10\0\u5f5e\0\u0186\0\u0186\0\u5fac\0\u5ffa"+
    "\0\u6048\0\u6096\0\u60e4\0\u6132\0\u6180\0\u61ce\0\u0186\0\u621c"+
    "\0\u0186\0\u0186\0\u0186\0\u626a\0\u0186\0\u62b8\0\u6306\0\u0186"+
    "\0\u0186\0\u0186\0\u6354\0\u63a2\0\u63f0\0\u643e\0\u648c\0\u64da"+
    "\0\u6528\0\u0186\0\u0186\0\u0186\0\u6576\0\u65c4\0\u0186\0\u6612"+
    "\0\u6660\0\u66ae\0\u66fc\0\u674a\0\u0186\0\u0186\0\u0186\0\u6798"+
    "\0\u67e6\0\u6834\0\u6882\0\u68d0\0\u691e\0\u696c\0\u69ba\0\u6a08"+
    "\0\u6a56\0\u6aa4\0\u6af2\0\u6b40\0\u6b8e\0\u6bdc\0\u6c2a\0\u0186"+
    "\0\u6c78\0\u6cc6\0\u6d14\0\u6d62\0\u6db0\0\u6dfe\0\u6e4c\0\u6e9a"+
    "\0\u6ee8\0\u0186\0\u6f36\0\u6f84\0\u0186\0\u6fd2\0\u0186\0\u7020"+
    "\0\u706e\0\u70bc\0\u0186\0\u0186\0\u0186\0\u710a\0\u0186\0\u7158"+
    "\0\u0186\0\u0186\0\u71a6\0\u71f4\0\u7242\0\u7290\0\u0186\0\u72de"+
    "\0\u732c\0\u737a\0\u73c8\0\u7416\0\u7464\0\u74b2\0\u7500\0\u754e"+
    "\0\u759c\0\u75ea\0\u7638\0\u7686\0\u76d4\0\u7722\0\u7770\0\u0186"+
    "\0\u0186\0\u0186\0\u0186\0\u77be\0\u780c\0\u785a\0\u0186\0\u78a8"+
    "\0\u78f6\0\u7944\0\u7992\0\u79e0\0\u0186\0\u0186\0\u0186\0\u0186"+
    "\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u7a2e\0\u7a7c\0\u7aca"+
    "\0\u7b18\0\u7b66\0\u7bb4\0\u7c02\0\u7c50\0\u0186\0\u0186\0\u7c9e"+
    "\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186"+
    "\0\u0186\0\u0186\0\u0186\0\u0186\0\u7cec\0\u7d3a\0\u7d88\0\u7dd6"+
    "\0\u7e24\0\u0186\0\u7e72\0\u7ec0\0\u7f0e\0\u0186\0\u7f5c\0\u7faa"+
    "\0\u7ff8\0\u8046\0\u0186\0\u8094\0\u80e2\0\u8130\0\u0186\0\u817e"+
    "\0\u81cc\0\u821a\0\u8268\0\u0186\0\u0186\0\u82b6\0\u0186\0\u8304"+
    "\0\u8352\0\u83a0\0\u83ee\0\u843c\0\u848a\0\u84d8\0\u8526\0\u8574"+
    "\0\u85c2\0\u8610\0\u865e\0\u0186\0\u0186\0\u86ac\0\u86fa\0\u8748"+
    "\0\u0186\0\u0186\0\u0186\0\u8796\0\u87e4\0\u0186\0\u8832\0\u8880"+
    "\0\u88ce\0\u891c\0\u896a\0\u89b8\0\u8a06\0\u8a54\0\u8aa2\0\u0186"+
    "\0\u8af0\0\u0186\0\u0186\0\u0186\0\u8b3e\0\u8b8c\0\u8bda\0\u8c28"+
    "\0\u0186\0\u8c76\0\u8cc4\0\u8d12\0\u8d60\0\u8dae\0\u8dfc\0\u8e4a"+
    "\0\u8e98\0\u8ee6\0\u8f34\0\u8f82\0\u8fd0\0\u0186\0\u901e\0\u906c"+
    "\0\u90ba\0\u9108\0\u0186\0\u9156\0\u91a4\0\u91f2\0\u9240";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\3\7\1\6\1\10\1\6\1\11"+
    "\1\12\2\6\1\13\1\6\1\14\1\15\1\16\1\4"+
    "\1\17\1\20\1\6\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\3\5\1\6\1\5\7\6"+
    "\1\42\1\43\2\6\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\0"+
    "\1\4\2\5\2\6\1\70\1\71\1\72\1\6\1\10"+
    "\1\6\1\73\1\12\2\6\1\13\1\6\1\14\1\74"+
    "\1\16\1\4\1\17\1\75\1\6\1\21\1\22\1\76"+
    "\1\77\1\100\1\26\1\101\1\30\1\31\1\32\1\102"+
    "\1\34\1\35\1\36\1\37\1\103\1\41\3\5\1\6"+
    "\1\5\7\6\1\42\1\43\2\6\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\0\5\104\1\70\1\71\13\104\1\105\1\106"+
    "\4\104\1\107\65\104\117\0\2\5\5\0\1\110\1\5"+
    "\1\0\1\111\1\112\1\113\1\112\1\114\1\115\12\0"+
    "\1\115\2\0\1\110\12\0\3\5\1\0\1\5\41\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\15\6\1\0\21\6\32\0\3\7\107\0\1\116\1\117"+
    "\5\0\1\110\1\117\1\120\1\111\1\112\1\113\1\112"+
    "\1\114\1\115\6\0\1\120\3\0\1\115\2\0\1\110"+
    "\12\0\3\117\1\0\1\117\41\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\7\6\1\121\1\6"+
    "\1\122\3\6\1\0\21\6\26\0\4\6\3\0\3\6"+
    "\1\123\3\6\1\0\1\6\4\0\1\6\1\124\1\6"+
    "\2\0\2\6\1\125\4\6\1\126\1\6\1\127\3\6"+
    "\1\0\21\6\26\0\2\114\6\0\1\114\37\0\3\114"+
    "\1\0\1\114\61\0\1\130\55\0\1\131\16\0\22\132"+
    "\1\133\1\134\72\132\5\0\1\135\1\136\110\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\1\6\1\137\1\6"+
    "\2\0\4\6\1\140\1\6\1\141\1\142\5\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\1\6\1\143\5\6\1\144\1\6\1\145"+
    "\3\6\1\0\21\6\55\0\1\146\1\147\45\0\1\150"+
    "\115\0\1\151\17\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\1\6\1\152\1\6\2\0\1\6\1\153\1\154"+
    "\4\6\1\155\3\6\1\156\1\6\1\0\21\6\26\0"+
    "\4\6\3\0\3\6\1\157\3\6\1\0\1\6\4\0"+
    "\2\6\1\160\2\0\3\6\1\161\11\6\1\0\21\6"+
    "\26\0\4\6\3\0\4\6\1\162\2\6\1\0\1\6"+
    "\4\0\1\6\1\163\1\6\2\0\2\6\1\164\1\165"+
    "\1\6\1\166\5\6\1\167\1\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\7\6\1\170\1\6\1\171\3\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\1\6\1\172"+
    "\1\6\2\0\2\6\1\173\1\174\1\6\1\175\7\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\2\6\1\176\1\6\1\177\4\6"+
    "\1\200\1\6\1\201\1\202\1\0\15\6\1\203\1\204"+
    "\2\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\1\6\1\205\13\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\4\6\1\206\10\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\4\6\1\207"+
    "\1\6\1\210\2\6\1\211\3\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\5\6\1\212\6\6\1\213\1\0\1\214\20\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\7\6\1\215\5\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\1\6\1\216"+
    "\7\6\1\217\3\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\1\6\1\220"+
    "\4\6\1\221\6\6\1\0\12\6\1\222\2\6\1\223"+
    "\3\6\26\0\4\6\3\0\3\6\1\224\3\6\1\0"+
    "\1\6\4\0\3\6\2\0\1\6\1\225\5\6\1\226"+
    "\1\6\1\227\3\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\1\6\1\124\1\6\2\0"+
    "\2\6\1\230\6\6\1\231\3\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\6\6\1\232\6\6\1\0\15\6\1\233\3\6\124\0"+
    "\1\234\115\0\1\235\1\236\114\0\1\237\115\0\1\240"+
    "\2\0\1\241\112\0\1\242\3\0\1\243\111\0\1\244"+
    "\4\0\1\245\110\0\1\246\5\0\1\247\107\0\1\250"+
    "\6\0\1\251\106\0\1\252\24\0\1\71\116\0\1\72"+
    "\107\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\2\6\1\253\4\6\1\121\1\6\1\122\3\6"+
    "\1\0\21\6\25\0\5\254\2\132\13\254\1\255\1\256"+
    "\72\254\1\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\1\6\1\257\5\6\1\144\1\6\1\145"+
    "\3\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\1\6\1\152\1\6\2\0\1\6\1\260"+
    "\1\154\4\6\1\155\3\6\1\156\1\6\1\0\21\6"+
    "\26\0\4\6\3\0\3\6\1\261\3\6\1\0\1\6"+
    "\4\0\2\6\1\262\2\0\3\6\1\263\2\6\1\264"+
    "\6\6\1\0\21\6\26\0\4\6\3\0\4\6\1\265"+
    "\2\6\1\0\1\6\4\0\1\6\1\163\1\6\2\0"+
    "\2\6\1\164\1\165\1\6\1\166\5\6\1\167\1\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\1\6\1\172\1\6\2\0\2\6\1\173\1\266"+
    "\1\6\1\175\7\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\4\6\1\207"+
    "\1\6\1\267\2\6\1\211\3\6\1\0\21\6\74\0"+
    "\1\270\46\0\5\104\2\0\14\104\1\271\72\104\5\105"+
    "\2\132\13\105\1\104\1\272\72\105\5\104\1\135\1\136"+
    "\14\104\1\0\77\104\2\0\14\104\1\271\4\104\1\273"+
    "\1\274\64\104\14\0\1\275\117\0\1\275\100\0\2\114"+
    "\6\0\1\114\1\0\1\111\1\112\1\113\1\112\1\0"+
    "\1\115\12\0\1\115\15\0\3\114\1\0\1\114\41\0"+
    "\2\276\6\0\1\276\1\0\1\111\1\112\1\113\1\112"+
    "\2\0\1\276\27\0\3\276\1\0\1\276\22\0\1\276"+
    "\16\0\2\116\6\0\1\116\1\0\1\111\1\112\1\113"+
    "\1\112\1\114\1\115\12\0\1\115\15\0\3\116\1\0"+
    "\1\116\41\0\1\116\1\117\5\0\1\110\1\117\1\0"+
    "\1\111\1\112\1\113\1\112\1\114\1\115\12\0\1\115"+
    "\2\0\1\110\12\0\3\117\1\0\1\117\41\0\3\120"+
    "\4\0\1\110\1\120\2\0\1\120\1\0\1\120\1\0"+
    "\1\120\4\0\1\120\4\0\2\120\2\0\1\110\4\0"+
    "\1\120\4\0\4\120\1\0\3\120\1\0\1\120\35\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\3\6\1\277\11\6\1\0\16\6\1\300\2\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\15\6\1\0\12\6\1\301\6\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\7\6\1\302"+
    "\1\6\1\303\3\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\1\6\1\304"+
    "\13\6\1\0\21\6\26\0\4\6\3\0\3\6\1\305"+
    "\3\6\1\0\1\6\4\0\2\6\1\306\2\0\15\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\6\6\1\307\6\6\1\0\21\6"+
    "\26\0\4\6\3\0\3\6\1\310\3\6\1\0\1\6"+
    "\4\0\3\6\2\0\15\6\1\0\21\6\27\0\1\132"+
    "\6\0\1\132\2\0\1\132\5\0\5\132\1\311\5\0"+
    "\1\132\2\0\1\132\2\0\1\132\2\0\1\132\2\0"+
    "\3\132\1\0\1\132\33\0\1\132\12\0\1\136\110\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\1\6\1\312\13\6\1\0\21\6\26\0\4\6\3\0"+
    "\4\6\1\313\2\6\1\0\1\6\4\0\3\6\2\0"+
    "\15\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\1\6\1\314\13\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\7\6\1\315\5\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\15\6\1\0\1\316\20\6\26\0\4\6\3\0\3\6"+
    "\1\317\3\6\1\0\1\6\4\0\3\6\2\0\2\6"+
    "\1\320\12\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\6\6\1\321\6\6"+
    "\1\0\21\6\25\0\5\146\2\0\107\146\31\147\1\322"+
    "\64\147\1\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\1\6\1\323\13\6\1\0\21\6\26\0"+
    "\4\6\3\0\4\6\1\324\2\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\5\6\1\325"+
    "\7\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\4\6\1\326\10\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\11\6\1\327\3\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\5\6\1\330\7\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\14\6\1\331"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\4\6\1\212\10\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\1\6\1\332\13\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\13\6"+
    "\1\167\1\6\1\0\21\6\26\0\4\6\3\0\3\6"+
    "\1\333\3\6\1\0\1\6\4\0\1\6\1\334\1\6"+
    "\2\0\7\6\1\335\1\336\3\6\1\337\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\11\6\1\340\3\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\11\6"+
    "\1\341\3\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\2\6\1\342\5\6"+
    "\1\343\4\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\13\6\1\344\1\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\1\6\1\345\13\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\3\6\1\346\7\6\1\167\1\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\2\6\1\347\2\6\1\350\7\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\2\6\1\351\6\6\1\340\3\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\15\6\1\0\20\6\1\352\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\1\353\2\6\2\0\10\6"+
    "\1\354\4\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\13\6\1\355\1\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\7\6\1\356\5\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\6\6\1\357\2\6\1\360\3\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\7\6\1\361\1\6\1\362\3\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\2\6\1\363\12\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\5\6"+
    "\1\364\3\6\1\365\2\6\1\366\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\14\6\1\367\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\1\370\2\6\2\0\15\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\1\6\1\371\13\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\6\6\1\372\5\6\1\373\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\13\6"+
    "\1\374\1\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\7\6\1\375\4\6"+
    "\1\376\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\14\6\1\377\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\14\6\1\u0100\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\1\u0101\14\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\14\6\1\u0102\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\13\6\1\u0103\1\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\4\6\1\u0104"+
    "\10\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\10\6\1\u0105\4\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\2\6\1\u0106\12\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\11\6\1\u0107\3\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\3\6\1\u0108"+
    "\11\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\3\6\1\u0109\7\6\1\u010a"+
    "\1\6\1\0\15\6\1\u010b\3\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\5\6\1\u010c"+
    "\7\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\12\6\1\u010d\2\6\1\0"+
    "\21\6\26\0\4\6\3\0\3\6\1\u010e\3\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\2\6\1\u010f\12\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\2\6\1\u0110"+
    "\12\6\1\0\21\6\124\0\1\u0111\115\0\1\u0112\17\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\3\6\1\u0113\11\6\1\0\21\6\25\0\2\u0114\1\254"+
    "\2\u0114\2\0\2\u0114\1\254\2\u0114\1\254\5\u0114\1\u0115"+
    "\4\254\1\u0116\5\u0114\1\254\2\u0114\1\254\2\u0114\1\254"+
    "\2\u0114\1\254\2\u0114\3\254\1\u0114\1\254\33\u0114\1\254"+
    "\4\u0114\1\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\6\6\1\u0117\6\6\1\0\1\316\20\6"+
    "\26\0\4\6\3\0\4\6\1\u0118\2\6\1\0\1\6"+
    "\4\0\3\6\2\0\15\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\2\6"+
    "\1\u0119\2\6\1\u011a\7\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\14\6"+
    "\1\u011b\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\1\u011c\3\6\1\212\10\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\6\6\1\u011d\6\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\1\u011e\2\6\1\u011f\11\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\1\u0120\1\6\1\347\2\6\1\350\7\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\1\6\1\371\7\6\1\u0121\3\6\1\0\21\6"+
    "\25\0\5\104\2\0\14\104\1\0\74\104\1\105\2\104"+
    "\2\0\2\104\1\105\2\104\1\105\5\104\1\105\1\132"+
    "\3\105\1\u0122\5\104\1\105\2\104\1\105\2\104\1\105"+
    "\2\104\1\105\2\104\3\105\1\104\1\105\33\104\1\105"+
    "\4\104\5\273\2\0\14\273\1\u0123\72\273\5\274\2\147"+
    "\14\274\1\u0124\5\274\1\u0125\64\274\1\0\2\276\6\0"+
    "\1\276\1\0\1\111\1\112\1\113\1\112\32\0\3\276"+
    "\1\0\1\276\41\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\12\6\1\374\2\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\10\6\1\u0126\4\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\7\6"+
    "\1\u0127\5\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\11\6\1\u0128\3\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\14\6\1\u0129\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\15\6\1\0\1\u012a\20\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\14\6\1\u012b\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\1\6\1\u012c\13\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\5\6\1\u0104\7\6\1\0\21\6\26\0\3\132\5\0"+
    "\1\132\2\0\1\132\1\0\1\132\1\0\1\132\4\0"+
    "\1\132\4\0\2\132\7\0\1\132\4\0\4\132\1\0"+
    "\3\132\1\0\1\132\35\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\1\u012d\20\6"+
    "\26\0\4\6\3\0\4\6\1\u012e\2\6\1\0\1\6"+
    "\4\0\3\6\2\0\15\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\11\6"+
    "\1\u012f\3\6\1\0\21\6\26\0\4\6\3\0\3\6"+
    "\1\u0130\3\6\1\0\1\6\4\0\3\6\2\0\15\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\15\6\1\0\1\6\1\u0131\1\u0132"+
    "\1\u0133\15\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\11\6\1\u0134\3\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\1\u0135\14\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\15\6\1\0"+
    "\12\6\1\u0136\6\6\25\0\30\147\1\u0137\1\322\64\147"+
    "\1\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\15\6\1\0\1\u0138\20\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\11\6\1\u0139"+
    "\3\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\1\u013a\20\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\1\u013b"+
    "\2\6\2\0\15\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\14\6\1\u013c"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\1\6\1\u013d\13\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\1\6\1\u013e\13\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\15\6"+
    "\1\0\1\u013f\20\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\2\6\1\u0140\12\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\11\6\1\u0141\3\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\4\6\1\u0142\10\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\4\6\1\u0143"+
    "\10\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\1\6\1\u0144\13\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\13\6\1\u0145\1\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\12\6\1\u0146\2\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\3\6\1\u0147"+
    "\11\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\1\6\1\u0148\13\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\1\6\1\u0149\13\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\15\6\1\0\1\u014a\20\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\14\6\1\u014b\1\0"+
    "\21\6\26\0\4\6\3\0\4\6\1\u014c\2\6\1\0"+
    "\1\6\4\0\3\6\2\0\7\6\1\u014d\5\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\2\6\1\u014e\12\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\3\6\1\277\11\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\1\6\1\u014f"+
    "\13\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\6\6\1\u0150\6\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\1\6\1\u0151\13\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\10\6\1\u0152\4\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\7\6\1\u0153"+
    "\5\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\4\6\1\u0154\10\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\14\6\1\u0155\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\6\6"+
    "\1\u0143\6\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\6\6\1\u0156\6\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\14\6\1\u0157\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\7\6\1\u0158\4\6\1\u0159\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\1\u015a"+
    "\14\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\4\6\1\u015b\10\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\10\6\1\336\4\6\1\0\21\6\26\0"+
    "\4\6\3\0\3\6\1\u0155\3\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\15\6\1\0"+
    "\1\u015c\20\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\14\6\1\u015d\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\15\6\1\0\1\u015e\20\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\13\6\1\u015f\1\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\6\6\1\u0160\6\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\2\6\1\u0161\12\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\7\6"+
    "\1\374\5\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\2\6\1\u0162\12\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\15\6\1\0\1\6\1\u0163\1\u0164"+
    "\1\u0165\15\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\10\6\1\u0166\4\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\1\6\1\u0167\13\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\1\6"+
    "\1\u0168\13\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\5\6\1\374\7\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\5\6\1\u0106\7\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\14\6\1\u0169\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\5\6\1\u016a"+
    "\6\6\1\u016b\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\13\6\1\u016c\1\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\1\6\1\u016d\13\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\1\6\1\u016e\12\6\1\374\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\15\6\1\0\15\6\1\u016f\3\6\26\0\4\6\3\0"+
    "\4\6\1\374\2\6\1\0\1\6\4\0\3\6\2\0"+
    "\15\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\14\6\1\u0170\1\0\21\6"+
    "\26\0\4\6\3\0\3\6\1\u0171\3\6\1\0\1\6"+
    "\4\0\3\6\2\0\15\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\1\6"+
    "\1\u0172\13\6\1\0\21\6\25\0\5\u0114\2\0\13\u0114"+
    "\1\255\74\u0114\3\254\1\u0114\2\0\2\u0114\1\254\2\u0114"+
    "\1\254\1\u0114\1\254\1\u0114\1\254\1\u0114\1\255\2\u0114"+
    "\1\254\4\u0114\2\254\7\u0114\1\254\4\u0114\4\254\1\u0114"+
    "\3\254\1\u0114\1\254\34\u0114\1\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\5\6\1\u0173\7\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\2\6\1\u0174\6\6\1\u0139\3\6"+
    "\1\0\21\6\26\0\4\6\3\0\4\6\1\u0175\2\6"+
    "\1\0\1\6\4\0\3\6\2\0\15\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\1\6\1\u0176\13\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\1\6"+
    "\1\u0177\13\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\2\6\1\u0178\12\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\7\6\1\u0179\5\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\1\6\1\u017a\13\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\1\u017b"+
    "\14\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\1\6\1\u017c\13\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\12\6\1\u017d\2\6\1\0\21\6\25\0"+
    "\1\104\3\105\1\104\2\0\2\104\1\105\2\104\1\105"+
    "\1\104\1\105\1\104\1\105\2\104\1\271\1\104\1\105"+
    "\4\104\2\105\7\104\1\105\4\104\4\105\1\104\3\105"+
    "\1\104\1\105\34\104\5\273\2\0\14\273\1\146\72\273"+
    "\5\274\2\147\14\274\1\147\5\274\1\u0125\71\274\2\147"+
    "\14\274\1\u0124\4\274\1\104\1\u0125\64\274\1\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\4\6"+
    "\1\u017e\10\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\14\6\1\u017f\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\1\6\3\374\15\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\1\6\1\u0180\13\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\1\374\14\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\15\6\1\0\1\6\1\u0181\1\u0182"+
    "\1\u0183\15\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\1\6\1\u0184\13\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\15\6\1\0\17\6\1\u0185\1\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\14\6"+
    "\1\u0186\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\2\6\1\u0187\12\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\1\6\1\u0188\1\u0189\1\u018a"+
    "\15\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\4\6\1\u018b\10\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\11\6\1\u018c\3\6\1\0\21\6\26\0\4\6\3\0"+
    "\3\6\1\u018d\3\6\1\0\1\6\4\0\3\6\2\0"+
    "\15\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\1\6\1\u018e"+
    "\1\u018f\1\u0190\15\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\6\6\1\u0191\6\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\1\6\1\u0192\1\u0193\1\u0194"+
    "\15\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\3\6\1\u0195\11\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\6\6\1\u0196\6\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\14\6\1\u0197"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\14\6\1\374\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\6\6\1\u0198\6\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\10\6\1\u0199"+
    "\4\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\1\6\1\u019a\13\6\1\0"+
    "\21\6\26\0\4\6\3\0\3\6\1\333\3\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\6\6\1\u019b\6\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\5\6\1\u019c"+
    "\7\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\1\6\1\u019d"+
    "\1\u019e\1\u019f\15\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\7\6\1\u01a0\5\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\3\6\1\374\11\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\12\6\1\u01a1\2\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\7\6\1\u010e"+
    "\5\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\7\6\1\u01a2\5\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\6\6\1\u01a3\6\6\1\0\21\6\26\0"+
    "\4\6\3\0\3\6\1\u01a4\3\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\14\6\1\u01a5"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\15\6\1\0\1\u01a6\20\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\2\6\1\u01a7\12\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\1\6\1\u01a8"+
    "\13\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\1\u01a9\20\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\4\6\1\u01aa\10\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\6\6"+
    "\1\u01ab\6\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\7\6\1\u01ac\5\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\6\6\1\u01ad\6\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\2\6\1\u01ae\12\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\2\6"+
    "\1\u01af\12\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\15\6\1\0\15\6"+
    "\1\u01b0\3\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\2\6\1\u01b1\12\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\2\6\1\u01b2\12\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\1\6\1\u0195\1\6"+
    "\2\0\15\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\4\6\1\u01b3\10\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\2\6\1\u01b4\2\0\15\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\2\6\1\u01b5"+
    "\2\0\15\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\2\6\1\u01b6\2\0\15\6\1\0"+
    "\21\6\26\0\4\6\3\0\3\6\1\u01b7\3\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\1\u01b8\14\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\6\6\1\u01b9\6\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\14\6\1\u01ba\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\2\6\1\u01bb\12\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\7\6\1\u014d"+
    "\5\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\6\6\1\u01bc\6\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\10\6\1\u01bd\4\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\1\6\1\u01be\13\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\1\6\1\u01bf"+
    "\13\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\2\6\1\u01c0\12\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\3\6\1\u01c1\11\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\3\6\1\u01c2\2\6\1\u0191\6\6\1\0\21\6\26\0"+
    "\4\6\3\0\4\6\1\u01c3\2\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\6\6\1\u01c4"+
    "\6\6\1\0\21\6\26\0\4\6\3\0\4\6\1\u01c5"+
    "\2\6\1\0\1\6\4\0\3\6\2\0\15\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\1\6\1\u01c6\13\6\1\0\21\6\26\0"+
    "\4\6\3\0\4\6\1\u01c7\2\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\13\6\1\u01c8"+
    "\1\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\14\6\1\u01c9\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\6\6\1\374\6\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\6\6"+
    "\1\u01ca\6\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\2\6\1\u01cb\12\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\3\6\1\u01cc\11\6\1\0\21\6"+
    "\26\0\4\6\3\0\3\6\1\u01cd\3\6\1\0\1\6"+
    "\4\0\3\6\2\0\15\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\6\6"+
    "\1\u01ce\6\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\1\6\1\u01cf\13\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\2\6\1\u01d0\2\0\15\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\2\6\1\u01d1"+
    "\2\0\15\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\2\6\1\u01d2\2\0\15\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\3\6\1\u01d3\11\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\1\6\1\374\13\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\2\6\1\u01d4"+
    "\12\6\1\0\21\6\26\0\4\6\3\0\4\6\1\u01d5"+
    "\2\6\1\0\1\6\4\0\3\6\2\0\15\6\1\0"+
    "\21\6\26\0\4\6\3\0\3\6\1\u01d6\3\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\21\6\26\0"+
    "\2\6\1\u01d7\1\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\1\6\1\u01d8\1\u01d9\2\6"+
    "\1\u01da\1\6\1\u01db\11\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\5\6\1\u01dc\7\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\10\6\1\u01d5\4\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\6\6\1\u01dd\6\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\3\6"+
    "\1\306\11\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\4\6\1\u01de\10\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\10\6\1\374\4\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\1\6\1\u01df\13\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\15\6"+
    "\1\0\15\6\1\u01e0\3\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\14\6\1\u01e1\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\1\374\20\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\1\u01e2"+
    "\14\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\15\6\1\u01e3"+
    "\3\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\6\6\1\u01e4\6\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\2\6\1\u01e5\12\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\3\6\1\u01e6"+
    "\11\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\3\6\1\u01e7\11\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\5\6\1\u01e8\7\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\14\6\1\u01e9\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\15\6\1\0\1\u01ea"+
    "\20\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\1\u01eb\2\6\2\0\15\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\13\6"+
    "\1\u01ec\1\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\15\6\1\0\1\6"+
    "\1\u01ed\1\u01ee\1\u01ef\15\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\15\6\1\0\1\6"+
    "\1\u01f0\1\u01f1\1\u01f2\15\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\15\6\1\0\1\6"+
    "\1\u01f3\1\u01f4\1\u01f5\15\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\11\6\1\u01f6\3\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\1\6\1\u010e\13\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\7\6\1\u01f7\5\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\3\6"+
    "\1\u01f8\11\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\1\6\1\u01f9\13\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\7\6\1\u01fa\5\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\7\6\1\u01fb\5\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\1\6"+
    "\1\u01fc\13\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\5\6\1\u01fd\7\6"+
    "\1\0\21\6\26\0\4\6\3\0\4\6\1\u01fe\2\6"+
    "\1\0\1\6\4\0\3\6\2\0\15\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\11\6\1\u01ff\3\6\1\0\21\6\26\0\4\6"+
    "\3\0\3\6\1\u0200\3\6\1\0\1\6\4\0\3\6"+
    "\2\0\15\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\12\6\1\u0201\2\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\14\6\1\u0202\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\1\u0203\14\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\15\6\1\0\1\6"+
    "\1\u0204\1\u0205\1\u0206\15\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\15\6\1\0\1\6"+
    "\1\u0207\1\u0208\1\u0209\15\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\15\6\1\0\1\6"+
    "\1\u020a\1\u020b\1\u020c\15\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\11\6\1\u020d\3\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\11\6\1\u020e\3\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\11\6\1\u01e4\3\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\1\6"+
    "\1\u020f\13\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\4\6\1\u0210\10\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\15\6\1\0\6\6\1\u0211\12\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\15\6\1\0\6\6\1\u0212\12\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\15\6"+
    "\1\0\6\6\1\u0213\12\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\4\6\1\u0214\10\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\10\6\1\u0215\4\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\13\6\1\u0216\1\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\14\6"+
    "\1\u0217\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\6\6\1\u0218\6\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\1\u0195\20\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\15\6"+
    "\1\0\1\u0219\20\6\26\0\4\6\3\0\3\6\1\u021a"+
    "\3\6\1\0\1\6\4\0\3\6\2\0\15\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\1\6\1\u021b\1\u021c\12\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\2\6\1\u016c\12\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\15\6"+
    "\1\0\4\6\1\u021d\14\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\4\6\1\u021e\10\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\10\6\1\u021f\4\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\14\6\1\u0195\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\2\6\1\u0220"+
    "\12\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\4\6\1\u0221\10\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\3\6\1\u0222\11\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\3\6\1\u0223\11\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\3\6\1\u0224"+
    "\11\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\1\u0225\14\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\2\6\1\u0226\12\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\1\6"+
    "\1\u0227\13\6\1\0\21\6\26\0\4\6\3\0\3\6"+
    "\1\374\3\6\1\0\1\6\4\0\3\6\2\0\15\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\3\6\1\u0228\11\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\6\6\1\u019a\6\6\1\0\21\6\26\0\4\6"+
    "\3\0\4\6\1\u0229\2\6\1\0\1\6\4\0\3\6"+
    "\2\0\15\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\15\6\1\0\10\6"+
    "\1\u022a\1\u022b\1\6\1\u022c\5\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\15\6\1\0"+
    "\11\6\1\u022b\7\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\1\u022d\2\6\2\0\15\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\1\6\1\u022e\13\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\2\6"+
    "\1\u022f\12\6\1\0\21\6\26\0\2\6\1\u01d7\1\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\15\6"+
    "\1\0\1\6\1\u0230\1\u0231\2\6\1\u0232\1\6\1\u0233"+
    "\11\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\14\6\1\u0234\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\15\6"+
    "\1\0\12\6\1\u0235\6\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\7\6\1\u0236\5\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\4\6\1\u0237\10\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\14\6\1\u0238\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\1\u0239\14\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\1\6\1\u023a\13\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\14\6\1\u023b\1\0\21\6\26\0\4\6\3\0"+
    "\3\6\1\u023c\3\6\1\0\1\6\4\0\3\6\2\0"+
    "\15\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\7\6\1\u023d\5\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\14\6\1\u023e\1\0\21\6\26\0\4\6"+
    "\3\0\4\6\1\u023f\2\6\1\0\1\6\4\0\3\6"+
    "\2\0\15\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\1\6\1\u0240\13\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\6\6\1\u0241\6\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\15\6\1\0\14\6\1\u0213\4\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\1\6"+
    "\1\u0213\13\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\15\6\1\0\1\u0242"+
    "\20\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\3\6\1\u0243\11\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\15\6\1\0\6\6\1\u0244\12\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\15\6\1\0"+
    "\6\6\1\u0245\12\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\6\6\1\u0246"+
    "\12\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\4\6\1\u0247\10\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\3\6\1\u0248\11\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\2\6\1\u0249"+
    "\12\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\1\6\1\u024a\13\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\12\6\1\u024b\6\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\3\6\1\u024c\11\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\1\6\1\u024d"+
    "\13\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\1\u024e\20\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\6\6\1\u024f\6\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\14\6"+
    "\1\u0250\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\1\6\1\u0251\13\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\10\6\1\u0252\1\u0253\1\6"+
    "\1\u022c\1\u0254\4\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\10\6\1\u0255"+
    "\10\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\15\6\1\0\11\6\1\u0253\2\6\1\u0254"+
    "\4\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\1\u0256\2\6\2\0\15\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\3\6"+
    "\1\u0257\11\6\1\0\21\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\6\6\1\u0212\6\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\14\6\1\u0212\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\11\6\1\u0258\3\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\2\6\1\u0259"+
    "\12\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\1\6\1\u025a\13\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\6\6\1\u025b\6\6\1\0\21\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\15\6\1\0\15\6\1\u025c\3\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\1\6\1\u025d"+
    "\13\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\1\6\1\u0246\13\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\14\6\1\u025e\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\15\6"+
    "\1\0\12\6\1\u0212\6\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\1\6\1\u025f\1\6\2\0\15\6"+
    "\1\0\21\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\15\6\1\0\1\u0260\20\6\26\0"+
    "\4\6\3\0\7\6\1\0\1\6\4\0\3\6\2\0"+
    "\6\6\1\u0261\6\6\1\0\21\6\26\0\4\6\3\0"+
    "\7\6\1\0\1\6\4\0\3\6\2\0\11\6\1\u0262"+
    "\3\6\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\15\6\1\0\1\u0143\20\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\1\6\1\u0263\13\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\14\6"+
    "\1\u0264\1\0\21\6\26\0\4\6\3\0\7\6\1\0"+
    "\1\6\4\0\3\6\2\0\11\6\1\u0265\3\6\1\0"+
    "\21\6\26\0\4\6\3\0\7\6\1\0\1\6\4\0"+
    "\3\6\2\0\1\u0266\14\6\1\0\21\6\26\0\4\6"+
    "\3\0\7\6\1\0\1\6\4\0\3\6\2\0\15\6"+
    "\1\0\14\6\1\u0254\4\6\26\0\4\6\3\0\7\6"+
    "\1\0\1\6\4\0\3\6\2\0\15\6\1\0\12\6"+
    "\1\u0264\6\6\26\0\4\6\3\0\7\6\1\0\1\6"+
    "\4\0\3\6\2\0\7\6\1\u0267\5\6\1\0\21\6"+
    "\26\0\4\6\3\0\7\6\1\0\1\6\4\0\3\6"+
    "\2\0\15\6\1\0\16\6\1\u0212\2\6\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37518];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\33\1\1\11\3\1\6\11\10\1"+
    "\1\11\1\1\4\11\1\1\1\11\16\1\1\11\1\0"+
    "\1\11\1\0\14\1\2\11\1\0\1\11\1\0\1\1"+
    "\1\11\11\1\2\11\62\1\5\11\1\1\1\11\1\1"+
    "\7\11\1\1\1\0\1\11\1\0\11\1\1\11\2\0"+
    "\2\1\1\11\13\1\1\0\10\1\1\0\76\1\2\11"+
    "\1\1\1\0\1\1\1\0\40\1\1\11\u0130\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[615];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GLSLFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return PREPROCESSOR_RAW;
            } 
            // fall through
          case 165: break;
          case 2: 
            { return UNKNOWN;
            } 
            // fall through
          case 166: break;
          case 3: 
            { return INTEGER_CONSTANT;
            } 
            // fall through
          case 167: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 168: break;
          case 5: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 169: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 170: break;
          case 7: 
            { return DASH;
            } 
            // fall through
          case 171: break;
          case 8: 
            { return SLASH;
            } 
            // fall through
          case 172: break;
          case 9: 
            { return STAR;
            } 
            // fall through
          case 173: break;
          case 10: 
            { yybegin(PREPROCESSOR); return PREPROCESSOR_BEGIN;
            } 
            // fall through
          case 174: break;
          case 11: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 175: break;
          case 12: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 176: break;
          case 13: 
            { return LEFT_BRACKET;
            } 
            // fall through
          case 177: break;
          case 14: 
            { return RIGHT_BRACKET;
            } 
            // fall through
          case 178: break;
          case 15: 
            { return LEFT_PAREN;
            } 
            // fall through
          case 179: break;
          case 16: 
            { return RIGHT_PAREN;
            } 
            // fall through
          case 180: break;
          case 17: 
            { return EQUAL;
            } 
            // fall through
          case 181: break;
          case 18: 
            { return PLUS;
            } 
            // fall through
          case 182: break;
          case 19: 
            { return PERCENT;
            } 
            // fall through
          case 183: break;
          case 20: 
            { return LEFT_ANGLE;
            } 
            // fall through
          case 184: break;
          case 21: 
            { return RIGHT_ANGLE;
            } 
            // fall through
          case 185: break;
          case 22: 
            { return AMPERSAND;
            } 
            // fall through
          case 186: break;
          case 23: 
            { return CARET;
            } 
            // fall through
          case 187: break;
          case 24: 
            { return VERTICAL_BAR;
            } 
            // fall through
          case 188: break;
          case 25: 
            { return TILDE;
            } 
            // fall through
          case 189: break;
          case 26: 
            { return BANG;
            } 
            // fall through
          case 190: break;
          case 27: 
            { return QUESTION;
            } 
            // fall through
          case 191: break;
          case 28: 
            { return COLON;
            } 
            // fall through
          case 192: break;
          case 29: 
            { return SEMICOLON;
            } 
            // fall through
          case 193: break;
          case 30: 
            { return COMMA;
            } 
            // fall through
          case 194: break;
          case 31: 
            { yybegin(YYINITIAL); return PREPROCESSOR_END;
            } 
            // fall through
          case 195: break;
          case 32: 
            { return UINT_CONSTANT;
            } 
            // fall through
          case 196: break;
          case 33: 
            { return FLOAT_CONSTANT;
            } 
            // fall through
          case 197: break;
          case 34: 
            { return DEC_OP;
            } 
            // fall through
          case 198: break;
          case 35: 
            { return SUB_ASSIGN;
            } 
            // fall through
          case 199: break;
          case 36: 
            { return STRING_CONSTANT;
            } 
            // fall through
          case 200: break;
          case 37: 
            { return COMMENT_LINE;
            } 
            // fall through
          case 201: break;
          case 38: 
            { return COMMENT_BLOCK;
            } 
            // fall through
          case 202: break;
          case 39: 
            { return DIV_ASSIGN;
            } 
            // fall through
          case 203: break;
          case 40: 
            { return MUL_ASSIGN;
            } 
            // fall through
          case 204: break;
          case 41: 
            { return DO_KEYWORD;
            } 
            // fall through
          case 205: break;
          case 42: 
            { return IF_KEYWORD;
            } 
            // fall through
          case 206: break;
          case 43: 
            { return IN_KEYWORD;
            } 
            // fall through
          case 207: break;
          case 44: 
            { return EQ_OP;
            } 
            // fall through
          case 208: break;
          case 45: 
            { return ADD_ASSIGN;
            } 
            // fall through
          case 209: break;
          case 46: 
            { return INC_OP;
            } 
            // fall through
          case 210: break;
          case 47: 
            { return MOD_ASSIGN;
            } 
            // fall through
          case 211: break;
          case 48: 
            { return LE_OP;
            } 
            // fall through
          case 212: break;
          case 49: 
            { return LEFT_OP;
            } 
            // fall through
          case 213: break;
          case 50: 
            { return GE_OP;
            } 
            // fall through
          case 214: break;
          case 51: 
            { return RIGHT_OP;
            } 
            // fall through
          case 215: break;
          case 52: 
            { return AND_ASSIGN;
            } 
            // fall through
          case 216: break;
          case 53: 
            { return AND_OP;
            } 
            // fall through
          case 217: break;
          case 54: 
            { return XOR_ASSIGN;
            } 
            // fall through
          case 218: break;
          case 55: 
            { return XOR_OP;
            } 
            // fall through
          case 219: break;
          case 56: 
            { return OR_ASSIGN;
            } 
            // fall through
          case 220: break;
          case 57: 
            { return OR_OP;
            } 
            // fall through
          case 221: break;
          case 58: 
            { return NE_OP;
            } 
            // fall through
          case 222: break;
          case 59: 
            { return PREPROCESSOR_STRING;
            } 
            // fall through
          case 223: break;
          case 60: 
            { return PREPROCESSOR_IF;
            } 
            // fall through
          case 224: break;
          case 61: 
            { return PREPROCESSOR_CONCAT;
            } 
            // fall through
          case 225: break;
          case 62: 
            { return DOUBLE_CONSTANT;
            } 
            // fall through
          case 226: break;
          case 63: 
            { return FOR_KEYWORD;
            } 
            // fall through
          case 227: break;
          case 64: 
            { return INT_TYPE;
            } 
            // fall through
          case 228: break;
          case 65: 
            { return OUT_KEYWORD;
            } 
            // fall through
          case 229: break;
          case 66: 
            { return RESERVED_KEYWORD;
            } 
            // fall through
          case 230: break;
          case 67: 
            { return LEFT_ASSIGN;
            } 
            // fall through
          case 231: break;
          case 68: 
            { return RIGHT_ASSIGN;
            } 
            // fall through
          case 232: break;
          case 69: 
            { return LOWP_KEYWORD;
            } 
            // fall through
          case 233: break;
          case 70: 
            { return FLAT_KEYWORD;
            } 
            // fall through
          case 234: break;
          case 71: 
            { return BOOL_TYPE;
            } 
            // fall through
          case 235: break;
          case 72: 
            { return VEC2_TYPE;
            } 
            // fall through
          case 236: break;
          case 73: 
            { return VEC3_TYPE;
            } 
            // fall through
          case 237: break;
          case 74: 
            { return VEC4_TYPE;
            } 
            // fall through
          case 238: break;
          case 75: 
            { return VOID_TYPE;
            } 
            // fall through
          case 239: break;
          case 76: 
            { return ELSE_KEYWORD;
            } 
            // fall through
          case 240: break;
          case 77: 
            { return UINT_TYPE;
            } 
            // fall through
          case 241: break;
          case 78: 
            { return MAT2_TYPE;
            } 
            // fall through
          case 242: break;
          case 79: 
            { return MAT3_TYPE;
            } 
            // fall through
          case 243: break;
          case 80: 
            { return MAT4_TYPE;
            } 
            // fall through
          case 244: break;
          case 81: 
            { return BOOL_CONSTANT;
            } 
            // fall through
          case 245: break;
          case 82: 
            { return CASE_KEYWORD;
            } 
            // fall through
          case 246: break;
          case 83: 
            { return PREPROCESSOR_LINE;
            } 
            // fall through
          case 247: break;
          case 84: 
            { return PREPROCESSOR_ELIF;
            } 
            // fall through
          case 248: break;
          case 85: 
            { return PREPROCESSOR_ELSE;
            } 
            // fall through
          case 249: break;
          case 86: 
            { return FLOAT_TYPE;
            } 
            // fall through
          case 250: break;
          case 87: 
            { return BVEC2_TYPE;
            } 
            // fall through
          case 251: break;
          case 88: 
            { return BVEC3_TYPE;
            } 
            // fall through
          case 252: break;
          case 89: 
            { return BVEC4_TYPE;
            } 
            // fall through
          case 253: break;
          case 90: 
            { return BREAK_JUMP_STATEMENT;
            } 
            // fall through
          case 254: break;
          case 91: 
            { return DVEC2_TYPE;
            } 
            // fall through
          case 255: break;
          case 92: 
            { return DVEC3_TYPE;
            } 
            // fall through
          case 256: break;
          case 93: 
            { return DVEC4_TYPE;
            } 
            // fall through
          case 257: break;
          case 94: 
            { return DMAT2_TYPE;
            } 
            // fall through
          case 258: break;
          case 95: 
            { return DMAT3_TYPE;
            } 
            // fall through
          case 259: break;
          case 96: 
            { return DMAT4_TYPE;
            } 
            // fall through
          case 260: break;
          case 97: 
            { return IVEC2_TYPE;
            } 
            // fall through
          case 261: break;
          case 98: 
            { return IVEC3_TYPE;
            } 
            // fall through
          case 262: break;
          case 99: 
            { return IVEC4_TYPE;
            } 
            // fall through
          case 263: break;
          case 100: 
            { return INOUT_KEYWORD;
            } 
            // fall through
          case 264: break;
          case 101: 
            { return UVEC2_TYPE;
            } 
            // fall through
          case 265: break;
          case 102: 
            { return UVEC3_TYPE;
            } 
            // fall through
          case 266: break;
          case 103: 
            { return UVEC4_TYPE;
            } 
            // fall through
          case 267: break;
          case 104: 
            { return PATCH_KEYWORD;
            } 
            // fall through
          case 268: break;
          case 105: 
            { return CONST_KEYWORD;
            } 
            // fall through
          case 269: break;
          case 106: 
            { return HIGHP_KEYWORD;
            } 
            // fall through
          case 270: break;
          case 107: 
            { return WHILE_KEYWORD;
            } 
            // fall through
          case 271: break;
          case 108: 
            { return PREPROCESSOR_ENDIF;
            } 
            // fall through
          case 272: break;
          case 109: 
            { return PREPROCESSOR_ERROR;
            } 
            // fall through
          case 273: break;
          case 110: 
            { return PREPROCESSOR_IFDEF;
            } 
            // fall through
          case 274: break;
          case 111: 
            { return PREPROCESSOR_UNDEF;
            } 
            // fall through
          case 275: break;
          case 112: 
            { return LAYOUT_KEYWORD;
            } 
            // fall through
          case 276: break;
          case 113: 
            { return BUFFER_KEYWORD;
            } 
            // fall through
          case 277: break;
          case 114: 
            { return DOUBLE_TYPE;
            } 
            // fall through
          case 278: break;
          case 115: 
            { return SAMPLE_KEYWORD;
            } 
            // fall through
          case 279: break;
          case 116: 
            { return SMOOTH_KEYWORD;
            } 
            // fall through
          case 280: break;
          case 117: 
            { return STRUCT;
            } 
            // fall through
          case 281: break;
          case 118: 
            { return SHARED_KEYWORD;
            } 
            // fall through
          case 282: break;
          case 119: 
            { return SWITCH_KEYWORD;
            } 
            // fall through
          case 283: break;
          case 120: 
            { return RETURN_JUMP_STATEMENT;
            } 
            // fall through
          case 284: break;
          case 121: 
            { return MAT2X2_TYPE;
            } 
            // fall through
          case 285: break;
          case 122: 
            { return MAT2X3_TYPE;
            } 
            // fall through
          case 286: break;
          case 123: 
            { return MAT2X4_TYPE;
            } 
            // fall through
          case 287: break;
          case 124: 
            { return MAT3X2_TYPE;
            } 
            // fall through
          case 288: break;
          case 125: 
            { return MAT3X3_TYPE;
            } 
            // fall through
          case 289: break;
          case 126: 
            { return MAT3X4_TYPE;
            } 
            // fall through
          case 290: break;
          case 127: 
            { return MAT4X2_TYPE;
            } 
            // fall through
          case 291: break;
          case 128: 
            { return MAT4X3_TYPE;
            } 
            // fall through
          case 292: break;
          case 129: 
            { return MAT4X4_TYPE;
            } 
            // fall through
          case 293: break;
          case 130: 
            { return PREPROCESSOR_DEFINE;
            } 
            // fall through
          case 294: break;
          case 131: 
            { return PREPROCESSOR_IFNDEF;
            } 
            // fall through
          case 295: break;
          case 132: 
            { yybegin(PREPROCESSOR_RAW_MODE); return PREPROCESSOR_PRAGMA;
            } 
            // fall through
          case 296: break;
          case 133: 
            { return VARYING_KEYWORD;
            } 
            // fall through
          case 297: break;
          case 134: 
            { return DEFAULT_KEYWORD;
            } 
            // fall through
          case 298: break;
          case 135: 
            { return DISCARD_JUMP_STATEMENT;
            } 
            // fall through
          case 299: break;
          case 136: 
            { return DMAT2X2_TYPE;
            } 
            // fall through
          case 300: break;
          case 137: 
            { return DMAT2X3_TYPE;
            } 
            // fall through
          case 301: break;
          case 138: 
            { return DMAT2X4_TYPE;
            } 
            // fall through
          case 302: break;
          case 139: 
            { return DMAT3X2_TYPE;
            } 
            // fall through
          case 303: break;
          case 140: 
            { return DMAT3X3_TYPE;
            } 
            // fall through
          case 304: break;
          case 141: 
            { return DMAT3X4_TYPE;
            } 
            // fall through
          case 305: break;
          case 142: 
            { return DMAT4X2_TYPE;
            } 
            // fall through
          case 306: break;
          case 143: 
            { return DMAT4X3_TYPE;
            } 
            // fall through
          case 307: break;
          case 144: 
            { return DMAT4X4_TYPE;
            } 
            // fall through
          case 308: break;
          case 145: 
            { return SAMPLER_TYPE;
            } 
            // fall through
          case 309: break;
          case 146: 
            { return UNIFORM_KEYWORD;
            } 
            // fall through
          case 310: break;
          case 147: 
            { return PRECISE_KEYWORD;
            } 
            // fall through
          case 311: break;
          case 148: 
            { return MEDIUMP_KEYWORD;
            } 
            // fall through
          case 312: break;
          case 149: 
            { yybegin(PREPROCESSOR_RAW_MODE); return PREPROCESSOR_VERSION;
            } 
            // fall through
          case 313: break;
          case 150: 
            { return PREPROCESSOR_DEFINED;
            } 
            // fall through
          case 314: break;
          case 151: 
            { return VOLATILE_KEYWORD;
            } 
            // fall through
          case 315: break;
          case 152: 
            { return RESTRICT_KEYWORD;
            } 
            // fall through
          case 316: break;
          case 153: 
            { return READONLY_KEYWORD;
            } 
            // fall through
          case 317: break;
          case 154: 
            { return CENTROID_KEYWORD;
            } 
            // fall through
          case 318: break;
          case 155: 
            { return CONTINUE_JUMP_STATEMENT;
            } 
            // fall through
          case 319: break;
          case 156: 
            { return COHERENT_KEYWORD;
            } 
            // fall through
          case 320: break;
          case 157: 
            { return INVARIANT_KEYWORD;
            } 
            // fall through
          case 321: break;
          case 158: 
            { return PRECISION_KEYWORD;
            } 
            // fall through
          case 322: break;
          case 159: 
            { return ATTRIBUTE_KEYWORD;
            } 
            // fall through
          case 323: break;
          case 160: 
            { return WRITEONLY_KEYWORD;
            } 
            // fall through
          case 324: break;
          case 161: 
            { yybegin(PREPROCESSOR_RAW_MODE); return PREPROCESSOR_EXTENSION;
            } 
            // fall through
          case 325: break;
          case 162: 
            { return SUBROUTINE_KEYWORD;
            } 
            // fall through
          case 326: break;
          case 163: 
            { return ATOMIC_UINT_TYPE;
            } 
            // fall through
          case 327: break;
          case 164: 
            { return NOPERSPECTIVE_KEYWORD;
            } 
            // fall through
          case 328: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
